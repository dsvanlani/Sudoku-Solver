{"version":3,"sources":["logo.svg","components/Tile.js","getBoard.js","components/CheckSolutionButton.js","checkIDs.js","utils/getRow.js","utils/getColumn.js","utils/get3by3.js","utils/sleep.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","event","console","log","key","className","this","props","isInitial","onClick","value","React","Component","getBoard","boardList","Math","floor","random","length","CheckSolutionButton","id","checkIDS","getRow","rows","i","includes","getColumn","cols","get3by3","squares","sleep","Board","initTiles","map","k","state","tiles","selectedTile","isSolved","step","history","setState","targetTile","updatedTiles","parseInt","concat","idArray","valuesList","push","valuesArray","checkNumbers","num","pop","checks","checkIDs","set","getValues","checkValidity","tempState","currentStep","newTiles","newHistory","slice","currentTiles","frontier","isTerminus","isSolution","actions","getActions","action","result","getResult","Promise","r","setTimeout","tilesToCheck","excludedValues","possibleValues","tile","firstOpenTile","firstOpenTileFound","getPossibleValues","actionObject","tileID","board","handleClick","onKeyDown","e","handleKeyDown","handleCheckSolution","handleBack","handleSolve","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ff63f0d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\nclass Tile extends React.Component {\n    handleKeyDown(event) {\n        console.log(event.key)\n    }\n    render() {\n        return(\n            <button\n            className={ this.props.isInitial ? \"tile initialTile\": \"tile\"}\n            onClick={() => this.props.onClick()}\n\n            >\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport default Tile","\nfunction getBoard() {\n    const boardList = [\n            [5,3,null,null,7,null,null,null,null,\n            6,null,null,1,9,5,null,null,null,\n            null,9,8,null,null,null,null,6,null,\n            8,null,null,null,6,null,null,null,3,\n            4,null,null,8,null,3,null,null,1,\n            7,null,null,null,2,null,null,null,6,\n            null,6,null,null,null,null,2,8,null,\n            null,null,null,4,1,9,null,null,5,\n            null,null,null,null,8,null,null,7,9]\n    ]\n    const randomIndex = Math.floor(Math.random() * boardList.length)\n    return boardList[randomIndex]\n}\n\nexport default getBoard","import React from 'react'\n\nexport default class CheckSolutionButton extends React.Component {\n    render() {\n        return(\n            <button \n            id=\"checkSolutionButton\"\n            onClick={() => this.props.onClick()}\n            >Check Solution</button>\n        \n        )\n    }\n}\n","const checkIDS = [\n    // rows\n    [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    [9,10,11,12,13,14,15,16,17],\n    [18,19,20,21,22,23,24,25,26],\n    [27,28,29,30,31,32,33,34,35],\n    [36,37,38,39,40,41,42,43,44],\n    [45,46,47,48,49,50,51,52,53],\n    [54,55,56,57,58,59,60,61,62],\n    [63,64,65,66,67,68,69,70,71],\n    [72,73,74,75,76,77,78,79,80],\n    // columns\n    [0,9,18,27,36,45,54,63,72],\n    [1,10,19,28,37,46,55,64,73],\n    [2,11,20,29,38,47,56,65,74],\n    [3,12,21,30,39,48,57,66,75],\n    [4,13,22,31,40,49,58,67,76],\n    [5,14,23,32,41,50,59,68,77],\n    [6,15,24,33,42,51,60,69,78],\n    [7,16,25,34,43,52,61,70,79],\n    [8,17,26,35,44,53,62,71,80],\n    // 3x3 squares\n    [0,1,2,9,10,11,18,19,20],\n    [27,28,29,36,37,38,45,46,47],\n    [54,55,56,63,64,65,72,73,74],\n    [3,4,5,12,13,14,21,22,23],\n    [30,31,32,39,40,41,48,49,50],\n    [57,58,59,66,67,68,75,76,77],\n    [6,7,8,15,16,17,24,25,26],\n    [33,34,35,42,43,44,51,52,53],\n    [60,61,62,69,70,71,78,79,80]\n]\n\nexport default checkIDS","/* Takes in an integer (tile id) and returns an array of tile id's to check */\n\nfunction getRow(id) {\n    const rows = [\n        [0,1,2,3,4,5,6,7,8],\n        [9,10,11,12,13,14,15,16,17],\n        [18,19,20,21,22,23,24,25,26],\n        [27,28,29,30,31,32,33,34,35],\n        [36,37,38,39,40,41,42,43,44],\n        [45,46,47,48,49,50,51,52,53],\n        [54,55,56,57,58,59,60,61,62],\n        [63,64,65,66,67,68,69,70,71],\n        [72,73,74,75,76,77,78,79,80]\n    ]\n\n    for (let i=0; i < rows.length; i++) {\n        if (rows[i].includes(id)) {\n            return rows[i]\n        }\n    }\n}\n\nexport default getRow","/* Takes in an id and returns an array of tile ids of that column */\n\nfunction getColumn(id) {\n    const cols = [\n        [0,9,18,27,36,45,54,63,72],\n        [1,10,19,28,37,46,55,64,73],\n        [2,11,20,29,38,47,56,65,74],\n        [3,12,21,30,39,48,57,66,75],\n        [4,13,22,31,40,49,58,67,76],\n        [5,14,23,32,41,50,59,68,77],\n        [6,15,24,33,42,51,60,69,78],\n        [7,16,25,34,43,52,61,70,79],\n        [8,17,26,35,44,53,62,71,80],\n    ]\n\n    for (let i=0; i < cols.length; i++) {\n        if (cols[i].includes(id)) {\n            return cols[i]\n        }\n    }\n}\n\nexport default getColumn","/* Takes in a tile id and returns an array of tile id's that are in the 3x3 */\n\nfunction get3by3(id) {\n    const squares = [\n        [0,1,2,9,10,11,18,19,20],\n        [27,28,29,36,37,38,45,46,47],\n        [54,55,56,63,64,65,72,73,74],\n        [3,4,5,12,13,14,21,22,23],\n        [30,31,32,39,40,41,48,49,50],\n        [57,58,59,66,67,68,75,76,77],\n        [6,7,8,15,16,17,24,25,26],\n        [33,34,35,42,43,44,51,52,53],\n        [60,61,62,69,70,71,78,79,80]\n    ]\n\n    for (let i=0; i < squares.length; i++) {\n        if (squares[i].includes(id)) {\n            return squares[i]\n        }\n    }\n}\n\nexport default get3by3","function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  export default sleep","import React from 'react'\nimport Tile from './Tile'\nimport getBoard from '../getBoard'\nimport CheckSolutionButton from './CheckSolutionButton'\nimport checkIDs from '../checkIDs'\nimport getRow from '../utils/getRow'\nimport getColumn from '../utils/getColumn'\nimport get3by3 from '../utils/get3by3'\nimport sleep from '../utils/sleep'\n\nclass Board extends React.Component {\n    constructor() {\n        super()\n        const boardValues = getBoard()\n        const initTiles = boardValues.map(k => {  // creates an array of objects of length 81\n            return {                             // to represent the tiles on the board\n                value: k,\n                isInitial: !!k \n            }\n        })\n        this.state = {\n            initTiles: initTiles,\n            tiles: initTiles,\n            selectedTile: null,\n            isSolved: false,\n            step: 0,\n            history: [initTiles]\n        }\n    }\n\n    handleClick(id) {\n        // Changes the selectedTile value in state\n        const selectedTile = id\n        this.setState({\n            ...this.state,\n            selectedTile: selectedTile,\n        })\n    }\n\n    handleKeyDown(event) {\n        const numbers = ['1','2','3','4','5','6','7','8','9']\n        if (this.state.tiles[this.state.selectedTile] && !this.state.tiles[this.state.selectedTile].isInitial ) {\n            if (numbers.includes(event.key)) {  // if the key down was a number\n                const targetTile = this.state.selectedTile   // get the target tile from state\n                let updatedTiles = [...this.state.tiles]     // copy the state of tiles\n                updatedTiles[targetTile] = {                 // change the value of the target tile\n                    value: parseInt(event.key),\n                }\n                this.setState({\n                    ...this.state,\n                    tiles: updatedTiles,\n                    step: this.state.step + 1,\n                    history: this.state.history.concat([updatedTiles])\n                })\n            }      \n        }\n    }\n\n    getValues(idArray) {\n        /* Takes in an array of the id's to check,\n            returns an array of values from said ids */\n\n        const valuesList = []\n        for (let i=0; i < idArray.length; i++) {\n            valuesList.push(this.state.tiles[idArray[i]].value)\n        }\n        return valuesList\n    }\n\n    checkValidity(valuesArray) {\n        /* Takes in an array of Values and returns true\n            or false depending on if each number between\n            1 and 9 is represented once and only once */\n            let checkNumbers = [1,2,3,4,5,6,7,8,9]\n\n            for (let i=0; i< checkNumbers.length; i++) {\n                var num = checkNumbers.pop()         // get a number from the list -\n                if (!valuesArray.includes(num)) {    // if its not in the set of values, return false\n                    return false\n                }\n            }\n            return true                            // return true if you never had to return false\n    }\n\n    handleCheckSolution() {\n        let checks = []\n        for (let i=0; i < checkIDs.length; i++) {   // This creates an array filled with the outcomes to\n            let set = this.getValues(checkIDs[i])   // each of the checks [true,true,false,true... ] etc.\n            checks.push(this.checkValidity(set))\n        }\n\n        if (!checks.includes(false)) {               // If none of them failed, set the state to solved\n            const tempState = this.state\n            tempState.isSolved = true\n            this.setState(tempState)\n        }\n    }\n\n    handleBack() {\n        if (this.state.step != 0) {\n            const currentStep = this.state.step                           // get current step\n            const newTiles = this.state.history[currentStep-1]            // get the tiles for the previous step in history\n            const newHistory = this.state.history.slice(0, currentStep)   // make the history forget that last step\n            this.setState({\n            ...this.state,\n            tiles: newTiles,\n            history: newHistory,\n            step: currentStep - 1\n        })\n\n        }\n        \n    }\n\n    isTerminus(tiles) {\n        for (let i=0; i < 81; i++) {\n            if (tiles[i].value === null) {\n                return false\n            }\n        }\n        return true\n    }\n    \n    isSolution() {\n        let checks = []\n        for (let i=0; i < checkIDs.length; i++) {   // This creates an array filled with the outcomes to\n            let set = this.getValues(checkIDs[i])   // each of the checks [true,true,false,true... ] etc.\n            checks.push(this.checkValidity(set))\n        }\n\n        if (checks.includes(false)) {\n            return false\n        } else {\n            return true\n         }\n    }\n\n    async handleSolve() {\n        let currentTiles = this.state.initTiles\n        let frontier = []\n        \n        while (true) {\n            /* First, check that the tile configuration is a solution, if so\n            change the state of the board to solved */\n            if (this.isTerminus(currentTiles) && this.isSolution(currentTiles)) {\n                break\n            }\n            \n             /* Next get all the possible actions for the current tile configuration */\n            let actions = this.getActions(currentTiles)\n            /* For each action get add the result to the frontier */\n            for (let i=0; i < actions.length; i++) {\n                let action = actions[i]\n                let result = this.getResult(currentTiles, action)\n                frontier.push(result)\n                }   \n            \n                await new Promise(r => setTimeout(r, 50));\n\n            /* set the new tile configuration to the last item in the frontier */\n            currentTiles = frontier.pop()\n            this.setState({\n                ...this.state,\n                tiles: currentTiles\n            })\n        }\n\n        this.setState({\n            ...this.state,\n            isSolved: true,\n            tiles: currentTiles\n        })\n    }\n\n    getPossibleValues(id, tiles) {\n        /* takes in a tile id and a tile configuration and returns an array of\n            legal values on that tile */\n        let tilesToCheck = []\n        let excludedValues = []\n        let possibleValues = []\n\n        tilesToCheck = tilesToCheck.concat(getRow(id), getColumn(id), get3by3(id))\n\n        for (let i=0; i < tilesToCheck.length; i++) {\n            let tile = tiles[tilesToCheck[i]]\n            if (!!tile.value) {\n                excludedValues.push(tile.value)\n            }\n        }\n\n        for (let i=1; i < 10; i++) {\n            if (!excludedValues.includes(i)) {\n                possibleValues.push(i)\n            }\n        }\n        return possibleValues\n    }\n\n    getActions(tiles) {\n        /* this takes in an array of tile objects and returns an array of \"action objects\"\n        which look like this:\n        action = {\n            tileID: <id of the tile>,\n            value: <possible value>\n        } */\n\n        // find the first open square\n        let firstOpenTile = null\n        let firstOpenTileFound = false\n        let actions = []\n\n        while (!firstOpenTileFound) {\n            for (let i=0; i<81; i++) {\n                if (tiles[80-i].value == null) {\n                    firstOpenTile = 80-i\n                    firstOpenTileFound = true\n                }\n            }\n        }\n\n        const possibleValues = this.getPossibleValues(firstOpenTile, tiles)\n\n        for (let i = 0; i<possibleValues.length; i++) {\n            let actionObject = {\n                tileID: firstOpenTile,\n                value: possibleValues[i]\n            }\n            actions.push(actionObject)\n        }\n        \n        return actions\n    }\n\n    getResult(tiles, action) {\n        /* takes in tiles as the tile configuration, and an action object and returns the\n        resulting tile configuration */\n        \n        const tileID = action.tileID\n        const value = action.value\n\n        let newTiles = tiles.slice()\n        newTiles[tileID] = {\n            value: value,\n            isInitial: false\n        }\n        \n        return newTiles\n    }\n\n\n    /* Render Method */\n    render() {\n        const board = this.state.tiles.map((tile, i) => \n            <Tile \n                key={i}\n                value={tile.value}\n                isInitial={tile.isInitial}\n                onClick={() => this.handleClick(i)}\n                />\n        )   \n        \n        return(\n            <div \n            className='board'\n            onKeyDown={e => this.handleKeyDown(e)}>\n                {board}\n                <CheckSolutionButton\n                    onClick={() => this.handleCheckSolution()} />\n                <button \n                className=\"toggleHistoryButton\"\n                onClick={() => this.handleBack()}>\n                    Undo\n                </button>\n                <button\n                id=\"solveButton\"\n                onClick={() => this.handleSolve()}>\n                Solve\n                </button>\n                <span id=\"solvedSpan\">\n                    {this.state.isSolved ? \"Correct Solution\":\"\"}\n                </span>\n            </div>\n        )\n    }\n}\n\n\nexport default Board","import logo from './logo.svg';\nimport './App.css';\nimport Board from './components/Board'\n\nfunction App() {\n  return (\n    <Board />\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}